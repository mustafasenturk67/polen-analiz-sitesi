# --- Gerekli K√ºt√ºphaneler ---
from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import io
import base64
import os
import random
import json
from dotenv import load_dotenv  # .env dosyasƒ±nƒ± okumak i√ßin
from google import genai       # Gemini API ile ileti≈üim i√ßin
from google.genai.errors import APIError # API hatalarƒ±nƒ± yakalamak i√ßin
import requests                # (Opsiyonel) Hava durumu vb. i√ßin eklenebilir

# --- Temel Flask Uygulama Yapƒ±landƒ±rmasƒ± ---\
load_dotenv() # Ortam deƒüi≈ükenlerini .env dosyasƒ±ndan y√ºkle
# Flask uygulamasƒ±nƒ± ba≈ülat. template_folder='.' index.html'in ana dizinde olduƒüunu belirtir.
app = Flask(__name__, template_folder='.', static_folder='.')
CORS(app) # T√ºm kaynaklardan gelen isteklere izin ver (Frontend'in baƒülanabilmesi i√ßin)

# --- API Anahtarƒ± Y√∂netimi ---\
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY') # API anahtarƒ±nƒ± ortam deƒüi≈ükeninden g√ºvenli oku

# --- Gemini API ƒ∞stemcisini Ba≈ülatma ---\
client = None
if GEMINI_API_KEY:
    try:
        # API Anahtarƒ±nƒ± kullanƒ±rken hata olu≈üursa (ge√ßersiz anahtar vb.), istemci yine de None kalƒ±r.
        client = genai.Client(api_key=GEMINI_API_KEY)
        print("‚úì Gemini API istemcisi ba≈üarƒ±yla ba≈ülatƒ±ldƒ±.")
    except Exception as e:
        print(f"‚úó HATA: Gemini API istemcisi ba≈ülatƒ±lamadƒ±: {e}")
else:
    print("UYARI: 'GEMINI_API_KEY' ortam deƒüi≈ükeni bulunamadƒ±. API √ßaƒürƒ±larƒ± ba≈üarƒ±sƒ±z olacaktƒ±r.")

# --- YARDIMCI FONKSƒ∞YONLAR (Gemini) ---

def analyze_with_gemini(image_data):
    # API ƒ∞stemcisi kontrol√º
    if not client:
        return {"error": "API istemcisi ba≈ülatƒ±lamadƒ±. L√ºtfen 'GEMINI_API_KEY' ortam deƒüi≈ükenini kontrol edin."}
    
    try:
        # G√∂r√ºnt√º verilerini modelin anlayacaƒüƒ± formata d√∂n√º≈üt√ºr
        image_part = {
            "mime_type": "image/jpeg",  # G√∂r√ºnt√º tipini varsayƒ±yoruz
            "data": image_data
        }

        # Analiz i√ßin istem (prompt)
        prompt = (
            "Bu, bir mikroskop altƒ±ndaki polen g√∂r√ºnt√ºs√ºd√ºr. G√∂r√ºnt√ºy√º dikkatlice incele. "
            "1. Polen var mƒ±? Yanƒ±tƒ±n: 'Evet' veya 'Hayƒ±r'. "
            "2. Polen varsa, en y√ºksek olasƒ±lƒ±klƒ± polen tipini (√∂rneƒüin: √áam, Hu≈ü, Ot, Me≈üe, Ambrosia vb.) T√ºrk√ße olarak tek kelimeyle belirt. "
            "3. G√ºven seviyeni (0.0 ile 1.0 arasƒ±nda) belirt. "
            "JSON formatƒ±nda yanƒ±tla: {\"is_pollen\": \"Evet/Hayƒ±r\", \"pollen_type\": \"Tip Adƒ±\", \"confidence\": 0.95}"
        )
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=[image_part, {"text": prompt}],
            config={"response_mime_type": "application/json"}
        )
        
        # Yanƒ±tƒ± JSON olarak ayrƒ±≈ütƒ±r
        result_json = json.loads(response.text)
        
        # JSON alanlarƒ±nƒ± kontrol et ve d√∂n√º≈üt√ºr
        is_pollen = result_json.get("is_pollen", "Hayƒ±r").lower() == "evet"
        pollen_type = result_json.get("pollen_type", "Yok")
        confidence = float(result_json.get("confidence", 0.0))

        return {
            "is_pollen": is_pollen,
            "pollen_type": pollen_type,
            "confidence": confidence
        }

    except APIError as e:
        print(f"Gemini API Hatasƒ±: {e}")
        return {"error": f"Gemini API'den yanƒ±t alƒ±namadƒ±: {str(e)}"}
    except json.JSONDecodeError:
        print(f"Gemini Yanƒ±tƒ± JSON Hatasƒ±: {response.text}")
        return {"error": "Gemini'den gelen yanƒ±t JSON formatƒ±nda deƒüildi."}
    except Exception as e:
        print(f"Beklenmedik Analiz Hatasƒ±: {e}")
        return {"error": f"Beklenmedik bir hata olu≈ütu: {str(e)}"}

def generate_text_gemini(user_prompt, system_instruction):
    # API ƒ∞stemcisi kontrol√º
    if not client:
        return {"error": "API istemcisi ba≈ülatƒ±lamadƒ±. L√ºtfen 'GEMINI_API_KEY' ortam deƒüi≈ükenini kontrol edin."}

    try:
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=user_prompt,
            config={
                "system_instruction": system_instruction,
                # Grounding (Google Search) sadece bilgi alma endpoint'i i√ßin kullanƒ±lacak
            }
        )
        return {"text": response.text}
    except APIError as e:
        print(f"Gemini API Hatasƒ± (Metin): {e}")
        return {"error": f"Metin olu≈üturma hatasƒ±: {str(e)}"}
    except Exception as e:
        print(f"Beklenmedik Metin Hatasƒ±: {e}")
        return {"error": f"Beklenmedik bir hata olu≈ütu: {str(e)}"}


# --- ROUTE TANIMLAMALARI ---

@app.route('/')
def index():
    # index.html dosyasƒ±nƒ± ana sayfa olarak sun
    return render_template('index.html')

# --- API ENDPOINTS ---

@app.route('/analyze', methods=['POST'])
def analyze_endpoint():
    # API ƒ∞stemcisi kontrol√º
    if not client:
        return jsonify({"error": "Sunucu hatasƒ±: API anahtarƒ± eksik."}), 500

    if 'file' not in request.files:
        return jsonify({"error": "Dosya bulunamadƒ±"}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "Ge√ßersiz dosya adƒ±"}), 400

    try:
        # G√∂r√ºnt√ºy√º Base64'e d√∂n√º≈üt√ºr
        image_bytes = file.read()
        image_base64 = base64.b64encode(image_bytes).decode('utf-8')

        # Gemini Analizi
        analysis_result = analyze_with_gemini(image_base64)

        if "error" in analysis_result:
             # Eƒüer hata varsa 500 kodu ile frontend'e g√∂nder
            return jsonify({"error": analysis_result['error']}), 500

        # Ba≈üarƒ±lƒ± yanƒ±t
        return jsonify(analysis_result)

    except Exception as e:
        print(f"Endpoint'te Hata: {e}")
        return jsonify({"error": f"Sunucu tarafƒ±nda i≈üleme hatasƒ±: {str(e)}"}), 500


@app.route('/get_pollen_info', methods=['POST'])
def get_pollen_info_endpoint():
    # API ƒ∞stemcisi kontrol√º
    if not client:
        return jsonify({"error": "Sunucu hatasƒ±: API anahtarƒ± eksik."}), 500

    data = request.json
    pollen_type = data.get('pollen_type')
    city = data.get('city') or 'T√ºrkiye' # ≈ûehir bo≈ü gelirse t√ºm T√ºrkiye i√ßin bilgi ara

    if not pollen_type:
        return jsonify({"error": "Polen tipi belirtilmedi"}), 400
    
    # Grounding (Google Search) ile bilgi toplama
    prompt = (
        f"'{pollen_type}' poleninin √∂zelliklerini, alerji mevsimini ve kaynaklarƒ±nƒ± √∂zetle. "
        f"Ayrƒ±ca, ≈üu anda {city} b√∂lgesindeki '{pollen_type}' poleninin **g√ºncel yoƒüunluk seviyesi** (d√º≈ü√ºk/orta/y√ºksek) nedir? "
        "Yanƒ±tƒ±nda, toplanan g√ºncel yoƒüunluk verisini mutlaka belirt."
    )
    
    # Grounding'i etkinle≈ütirerek Google'dan g√ºncel bilgi al
    try:
        gemini_response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config={"system_instruction": "Alerjenler ve g√ºncel √ßevre verileri konusunda uzman bir biyolog gibi davran."},
            tools=[{"google_search": {}}]
        )
        
        info_text = gemini_response.text
        return jsonify({"info": info_text, "pollen_type": pollen_type, "city": city})

    except APIError as e:
        print(f"Gemini API Hatasƒ± (Bilgi): {e}")
        return jsonify({"error": f"Bilgi alma hatasƒ±: {str(e)}"}), 500
    except Exception as e:
        print(f"Beklenmedik Bilgi Hatasƒ±: {e}")
        return jsonify({"error": f"Beklenmedik bir hata olu≈ütu: {str(e)}"}), 500


@app.route('/get_action_plan', methods=['POST'])
def get_action_plan_endpoint():
    # API ƒ∞stemcisi kontrol√º
    if not client:
        return jsonify({"error": "Sunucu hatasƒ±: API anahtarƒ± eksik."}), 500
        
    data = request.json
    pollen_type = data.get('pollen_type')
    
    if not pollen_type:
        return jsonify({"error": "Polen tipi belirtilmedi"}), 400
        
    prompt = f"{pollen_type} polenine alerjisi olan biri i√ßin 5 adƒ±mlƒ± detaylƒ± bir alerji √∂nleme planƒ± olu≈ütur. Her adƒ±mƒ± kalƒ±n (bold) olarak ba≈ülat."

    # Grounding kullanƒ±lmayacak, sadece yaratƒ±cƒ± metin olu≈üturma
    gemini_response = generate_text_gemini(prompt, system_instruction="Bir halk saƒülƒ±ƒüƒ± uzmanƒ± ve alerji hekimi gibi davran.")
    
    if "error" in gemini_response:
        return jsonify({"error": gemini_response['error']}), 500
        
    return jsonify({"plan": gemini_response.get("text", "Plan olu≈üturulamadƒ±."), "pollen_type": pollen_type})


# --- Sunucuyu √áalƒ±≈ütƒ±rma ---
if __name__ == '__main__':
    # Bu blok, kodu yerel makinenizde 'python server.py' ile test etmek i√ßindir.
    port = int(os.environ.get('PORT', 5000))

    if not GEMINI_API_KEY:
        print("\n" + "="*50)
        print("!!! ‚ö† UYARI: 'GEMINI_API_KEY' bulunamadƒ± veya bo≈ü. !!!")
        print("L√ºtfen proje klas√∂r√ºn√ºzde '.env' dosyasƒ±nƒ± olu≈üturup")
        print("GEMINI_API_KEY=AIzaSy... ≈üeklinde anahtarƒ±nƒ±zƒ± eklediƒüinizden emin olun.")
        print("API √ßaƒürƒ±larƒ± ≈üu anda √ßalƒ±≈ümayacaktƒ±r.")
        print("="*50 + "\n")
    else:
        print("\n‚úì API Anahtarƒ± .env dosyasƒ±ndan ba≈üarƒ±yla y√ºklendi.")

    print(f"üöÄ Flask sunucusu ba≈ülatƒ±lƒ±yor...")
    print(f"   -> Yerel Eri≈üim: http://127.0.0.1:{port}")
    app.run(debug=True, host='0.0.0.0', port=port)
